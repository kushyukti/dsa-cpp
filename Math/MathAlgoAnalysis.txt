
Fibonacci Sequence


function fibonacci(n) {                     | 
  const fib = [0, 1];                       | 1

  for (let i = 2; i < n; i++) {             | 
    fib[i] = fib[i - 1] + fib[i - 2];       | n
  }                                         |
  return fib;                               | 1
}

Time Complexity -- O(n)



Factorial 

function factorial(n) {
  let x = 1;                                    1

  for (let i = 1; i <= n; i++) {  
    x = x * i;                                  n
  }
  return x;                                     1
}

Time Complexity -- O(n)

Prime Number

function isPrime(n) {
  if (n === 2) {                                  1
    return true;
  }

  for (let i = 2; i < n; i++) {
    if (n % i == 0) {                             n
      return false;
    }
  }
  return true;
}

Time Complexity -- O(n)



function optimezedIsPrime(n) {
  if (n === 2) {
    return true;
  }

  for (let i = 2; i <= Math.sqrt(n); i++) {
    if (n % i == 0) {
      return false;
    }
  }
  return true;
}
Time Complexity -- O(sqrt(n))


function isPowerOfTwo(n) {
  if (n < 1) {
    return false;
  }

  while (n > 1) {
    if (n % 2 !== 0) {     
      return false;
    }

    n = n / 2;                 ----------logn because of this line
  }
  return true;
}

Time Complexity -- O(logn)

